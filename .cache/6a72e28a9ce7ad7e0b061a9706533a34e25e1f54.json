{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jordancotter/Desktop/personal/alt-voting/imports/ui/App.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions",["flow",{}],"nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}]],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"sourceFileName":"/Users/jordancotter/Desktop/personal/alt-voting/imports/ui/App.vue","filename":"/Users/jordancotter/Desktop/personal/alt-voting/imports/ui/App.vue","passPerPreset":false,"envName":"development","cwd":"/Users/jordancotter/Desktop/personal/alt-voting","root":"/Users/jordancotter/Desktop/personal/alt-voting","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.7.6","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jordancotter/Desktop/personal/alt-voting/imports/ui/App.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/Users/jordancotter/Desktop/personal/alt-voting/imports/ui/App.vue"}},"code":"var _toConsumableArray;\n\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\n\nvar _slicedToArray;\n\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 1);\nvar Hello;\nmodule.link(\"./components/Hello.vue\", {\n  \"default\": function (v) {\n    Hello = v;\n  }\n}, 0);\nvar Info;\nmodule.link(\"./components/Info.vue\", {\n  \"default\": function (v) {\n    Info = v;\n  }\n}, 1);\nvar series;\nmodule.link(\"promise.series\", {\n  \"default\": function (v) {\n    series = v;\n  }\n}, 2);\nvar R;\nmodule.link(\"ramda\", {\n  \"*\": function (v) {\n    R = v;\n  }\n}, 3);\nmodule.exportDefault({\n  components: {\n    Hello: Hello,\n    Info: Info\n  },\n  data: function () {\n    return {\n      winner: \"\",\n      votes: {}\n    };\n  },\n  mounted: function () {\n    this.votes = {\n      joe: [\"Libertarian\", \"Democrat\", \"Republican\", \"Green Party\"],\n      paul: [\"Democrat\", \"Libertarian\", \"Republican\", \"Green Party\"],\n      dan: [\"Republican\", \"Libertarian\", \"Democrat\", \"Green Party\"],\n      steve: [\"Libertarian\", \"Republican\", \"Green Party\", \"Democrat\"]\n    };\n  },\n  computed: {},\n  methods: {\n    calcVotes: function (votes) {\n      var topVotes = getTopVotes(votes);\n\n      var _getLowestAndHighest = getLowestAndHighest(votes),\n          _getLowestAndHighest2 = _slicedToArray(_getLowestAndHighest, 2),\n          winner = _getLowestAndHighest2[0],\n          losers = _getLowestAndHighest2[1];\n\n      console.log(\"WINNER\", winner);\n      console.log(\"LOSERS\", losers);\n    },\n    startVote: function () {\n      var _this = this;\n\n      setTimeout(function () {\n        if (!_this.winner) {\n          _this.votes = _this.calcVotes(_this.votes); // this.startVote()\n        }\n      }, 1000); // const sleep = val => {\n      //   return new Promise(resolve => {\n      //     setTimeout(() => {\n      //       this.votes = val\n      //       resolve()\n      //     }, 1000)\n      //   })\n      // }\n      //  \n      // // each item returns a Promise\n      // series([\n      //   () => sleep({\n      //       joe: [`Libertarian`, `Democrat`, `Republican`, `Green Party`],\n      //       paul: [`Libertarian`, `Republican`, `Green Party`],\n      //       dan: [`Republican`, `Libertarian`, `Democrat`, `Green Party`],\n      //       steve: [`Libertarian`, `Republican`, `Green Party`, `Democrat`],\n      //   }),\n      //   () => sleep({\n      //     joe: [`Libertarian`, `Democrat`, `Republican`, `Green Party`],\n      //     paul: [`Libertarian`, `Republican`, `Green Party`],\n      //     dan: [`Libertarian`, `Democrat`, `Green Party`],\n      //     steve: [`Libertarian`, `Republican`, `Green Party`, `Democrat`],\n      //   })\n      // ]).then(() => {\n      //   console.log('Completed')\n      // })\n    }\n  }\n});\n\n// {} -> [``]\nfunction getTopVotes(votes) {\n  return Object.keys(votes).map(function (key) {\n    return votes[key][0];\n  });\n} // [``] -> ``\n\n\nfunction getWinner(groupedVotes, totalVotes) {\n  console.log(groupedVotes, totalVotes);\n  var highest = groupedVotes.reduce(function (high, supporters) {\n    return supporters.length > high.length ? supporters : high;\n  }, groupedVotes[0]);\n  var lengthNeeded = Math.floor(totalVotes / 2 + 1);\n  return highest.length >= lengthNeeded ? highest[0] : \"\";\n} // [``] -> [``, []] \n\n\nfunction getLowestAndHighest(votes) {\n  console.log(\"VOTES\", votes);\n\n  var sortFunc = function (a, b) {\n    return a === b ? -1 : 1;\n  };\n\n  var grouped = R.groupWith(R.equals, R.sort(sortFunc, votes));\n  var winner = getWinner(grouped, votes.length);\n  var losers = grouped.reduce(function (acc, supporters) {\n    if (supporters.length === acc[0].length) return [].concat(_toConsumableArray(acc), [supporters]);\n    if (supporters.length < acc[0].length) return [supporters];\n    return acc;\n  }, [grouped[0]]);\n  return [winner, losers];\n}","map":{"version":3,"sources":["/Users/jordancotter/Desktop/personal/alt-voting/imports/ui/App.vue"],"names":["_toConsumableArray","module","link","default","v","_slicedToArray","Hello","Info","series","R","exportDefault","components","data","winner","votes","mounted","joe","paul","dan","steve","computed","methods","calcVotes","topVotes","getTopVotes","getLowestAndHighest","losers","console","log","startVote","setTimeout","Object","keys","map","key","getWinner","groupedVotes","totalVotes","highest","reduce","high","supporters","length","lengthNeeded","Math","floor","sortFunc","a","b","grouped","groupWith","equals","sort","acc"],"mappings":"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","sourcesContent":["\nimport Hello from './components/Hello.vue'\nimport Info from './components/Info.vue'\nimport series from 'promise.series'\nimport * as R from 'ramda' // TODO: import these individually\n\nexport default {\n  components: {\n    Hello,\n    Info,\n  },\n  data: () => ({\n    winner: ``,\n    votes: {},\n  }),\n  mounted () {\n    this.votes = {\n      joe: [`Libertarian`, `Democrat`, `Republican`, `Green Party`],\n      paul: [`Democrat`, `Libertarian`, `Republican`, `Green Party`],\n      dan: [`Republican`, `Libertarian`, `Democrat`, `Green Party`],\n      steve: [`Libertarian`, `Republican`, `Green Party`, `Democrat`],\n    }\n  },\n  computed: {},\n  methods: {\n    calcVotes (votes) {\n      const topVotes = getTopVotes(votes)\n      const [winner, losers] = getLowestAndHighest(votes)\n      console.log(`WINNER`, winner)\n      console.log(`LOSERS`, losers)\n    },\n    startVote () {\n      setTimeout(() => {\n        if (!this.winner) {\n          this.votes = this.calcVotes(this.votes)\n          // this.startVote()\n        }\n      }, 1000)\n      // const sleep = val => {\n      //   return new Promise(resolve => {\n      //     setTimeout(() => {\n      //       this.votes = val\n      //       resolve()\n      //     }, 1000)\n      //   })\n      // }\n      //  \n      // // each item returns a Promise\n      // series([\n      //   () => sleep({\n      //       joe: [`Libertarian`, `Democrat`, `Republican`, `Green Party`],\n      //       paul: [`Libertarian`, `Republican`, `Green Party`],\n      //       dan: [`Republican`, `Libertarian`, `Democrat`, `Green Party`],\n      //       steve: [`Libertarian`, `Republican`, `Green Party`, `Democrat`],\n      //   }),\n      //   () => sleep({\n      //     joe: [`Libertarian`, `Democrat`, `Republican`, `Green Party`],\n      //     paul: [`Libertarian`, `Republican`, `Green Party`],\n      //     dan: [`Libertarian`, `Democrat`, `Green Party`],\n      //     steve: [`Libertarian`, `Republican`, `Green Party`, `Democrat`],\n      //   })\n      // ]).then(() => {\n      //   console.log('Completed')\n      // })\n    }\n  }\n}\n// {} -> [``]\nfunction getTopVotes (votes) {\n  return Object.keys(votes).map(key => votes[key][0])\n}\n// [``] -> ``\nfunction getWinner (groupedVotes, totalVotes) {\n  console.log(groupedVotes, totalVotes)\n  const highest = groupedVotes.reduce((high, supporters) => supporters.length > high.length ? supporters : high, groupedVotes[0]) \n  const lengthNeeded = Math.floor(totalVotes / 2 + 1)\n  return highest.length >= lengthNeeded ? highest[0] : ``\n}\n// [``] -> [``, []] \nfunction getLowestAndHighest (votes) {\n  console.log(`VOTES`, votes)\n  const sortFunc = (a, b) => a === b ? -1 : 1 \n  const grouped = R.groupWith(R.equals, R.sort(sortFunc, votes))\n  const winner = getWinner(grouped, votes.length)\n  const losers = grouped.reduce((acc, supporters) => {\n    if (supporters.length === acc[0].length) return [...acc, supporters]\n    if (supporters.length < acc[0].length) return [supporters]\n    return acc\n  }, [grouped[0]]) \n  return [winner, losers]\n}\n"]},"sourceType":"module","hash":"6a72e28a9ce7ad7e0b061a9706533a34e25e1f54"}
